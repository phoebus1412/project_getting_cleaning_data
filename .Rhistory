find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
add2<-function(x,y){
x+y
}
add2(3,5)
above<-function(x,n){
use<-x>n
x[use]
}
x<-1:20
above(x)
above(x,12)
above<-function(x,n=10){
use<-x>n
x[use]
}
above(x)
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for( i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
pwd
dir()
setwd("~/")
file.choose()
y<-10
f<-function(x){
y<-2
y^2+g(x)
}
g<-function(x){
x*y
}
f(3)
cube<-function(x,n){
x^3
}
cube(3)
x<-1:10
print(x)
f<-function(x){
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
clear(0)
clear()
a<-gl(2,5)
b<-gl(5,2)
c<-interaction(a,b)
print(c)
print(length(c))
help("interaction")
library(datasets)
data(iris)
?iris
lappply(iris$virginica,mean)
lapply(iris$virginica,mean)
s<-iris$virginica
s<-split(iris,iris$Species)
result<-lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
result<-lapply(s,function(iris) colMeans(iris[,c("Sepal.Length")]))
lapply(s$Sepal.Length,Mean)
lapply(s$Sepal.Length,mean)
print(lapply(s$Sepal.Length,mean))
result<-lapply(s,function(iris) colMeans(iris[,"Sepal.Length"]))
result<-lapply(s,function(iris) colMeans(iris[,c("Sepal.Length","Sepal.Width")]))
print(result)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls
help("<<-")
help("set")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
a<-matrix(c(2,0,0,3),2,2)
print(a)
b<-makeCacheMatrix(a)
print(b)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## cacheSolve will calculates the inverse of an matrix,
## by firstly seeks the inverse otherwise it calculates
## the inverse and return the inverse
cacheSolve <- function(x, ...) {
m<-x$getinverse()
if(!is.na(m)){
message("getting cachd inverse matrix")
return (m)
}
originalMatrix<-x$get()
m<-solve(originalMatrix)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## cacheSolve will calculates the inverse of an matrix,
## by firstly seeks the inverse otherwise it calculates
## the inverse and return the inverse
cacheSolve <- function(x, ...) {
m<-x$getinverse()
if(!is.na(m)){
message("getting cached inverse matrix")
return (m)
}
originalMatrix<-x$get()
m<-solve(originalMatrix)
x$setinverse(m)
m
}
makeCacheMatrix(a)
cacheSolve(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
c<-c(1,2,3,4,5)
makeVector(c)
cachemean(c)
x<-12:514
vec<-makeVector(x)
cachemean(vec)
cachemean(vec)
y<-c(1,2,3,4,5)
ym<-makeVector(y)
cachemean(ym)
ainv<-makeCacheMatrix(a)
cachemean(ainv)
cacheSolve(ainv)
help("is.na")
help(ls)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinverse<- function(solve) m<<-solve
getinverse<- function() m
list(set=set,get=get,
setinverse=setinverse,
getinverse=getinverse)
}
## cacheSolve will calculates the inverse of an matrix,
## by firstly seeks the inverse otherwise it calculates
## the inverse and return the inverse
cacheSolve <- function(x, ...) {
m<-x$getinverse()
if(!is.null(m)){
message("getting cached inverse matrix")
return (m)
}
originalMatrix<-x$get()
m<-solve(originalMatrix)
x$setinverse(m)
m
}
cacheSolve(ainv)
cacheSolve(ainv)
setwd("Z:\\R")
ls
dir()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile=""communities.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="communities.csv")
com<-read.csv(file.choose())
str(com)
agricultureLogical<-com$ACR==3&com$AGS==6
?whihc
?which
which(agriculturalLogical)
which(agricultureLogical)
?jpeg
install.packages("jpeg")
?readJPEG
img<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native=TRUE)
library(jpeg)
img<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native=TRUE)
download.files("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="jeffimg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="jeffimg.jpg")
img<-readJPEG("jeffimg.jpg",native=TRUE)
str(img)
quantile(img,c=(0.3,0.8))
quantile(img,probs=c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ",destfile="gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv ",destfile="ed.csv")
gdp<-read.csv("gdp.csv")
ed<-read.csv("ed.csv")
str(gdp)
?match
str(ed)
names(gdp)
sort(gdp,decreasing=TRUE)
sort(gdp[,5],decreasing=TRUE)
v1<-gdp[,1]
v2<-ed$CountryCode
sum(v1 %in% v2)
str(gdp)
?group_by
?groupby
setwd(Z:\R\project_getting_cleaning_data")
setwd(Z:\\R\\project_getting_cleaning_data")
setwd("Z:\\R\\project_getting_cleaning_data")
?source
source("Z:\R\CourseraExercises\getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset\train")
source("Z:\R\CourseraExercises\getdata-projectfiles-UCI HAR Dataset\UCI HAR Dataset\test")
source("Z:\\R\\CourseraExercises\\getdata-projectfiles-UCI HAR Dataset\\UCI HAR Dataset\\train")
source("Z:\\R\\CourseraExercises\\getdata-projectfiles-UCI HAR Dataset\\UCI HAR Dataset\\test")
